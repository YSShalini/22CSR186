✅ Functional Component Example:
jsx
Copy
Edit
function Welcome() {
  return <h1>Hello, React!</h1>;
}


✅ useState (for managing state):
jsx
Copy
Edit
import { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  return (
    <>
      <h1>{count}</h1>
      <button onClick={() => setCount(count + 1)}>Increase</button>
    </>
  );
}


✅ useEffect (runs code when component loads or updates):
jsx
Copy
Edit
import { useEffect, useState } from 'react';

function Timer() {
  const [time, setTime] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => setTime(t => t + 1), 1000);
    return () => clearInterval(interval); // cleanup
  }, []);

  return <p>{time} seconds passed.</p>;
}



✅ Using fetch():
jsx
Copy
Edit
import { useEffect, useState } from 'react';

function Posts() {
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/posts')
      .then(res => res.json())
      .then(data => setPosts(data.slice(0, 5)));
  }, []);

  return (
    <ul>
      {posts.map(post => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  );
} 




✅ Handling a form in React:
jsx
Copy
Edit
import { useState } from 'react';

function ContactForm() {
  const [name, setName] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    alert("Name submitted: " + name);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" value={name}
             onChange={(e) => setName(e.target.value)} />
      <button type="submit">Submit</button>
    </form>
  );
} 




✅ Array methods:
js
Copy
Edit
const nums = [1, 2, 3, 4];

// map
const squares = nums.map(n => n * n);

// filter
const evens = nums.filter(n => n % 2 === 0);

// reduce
const sum = nums.reduce((acc, val) => acc + val, 0);
✅ Sample JS Problems:
js
Copy
Edit
// 1. Reverse a string
function reverseString(str) {
  return str.split('').reverse().join('');
}

// 2. Remove duplicates from array
function removeDuplicates(arr) {
  return [...new Set(arr)];
}




✅ Basic commands:
bash
Copy
Edit
git init
git add .
git commit -m "initial commit"
git remote add origin https://github.com/<your-username>/<repo-name>.git
git push -u origin master
✅ .gitignore example:
bash
Copy
Edit
node_modules/
.DS_Store
.env



🧠 1. React Core Concepts (Deep Dive)
🔸 Components
React apps are made of components — reusable pieces of UI.

There are two types:

Functional Components → function MyComponent()

Class Components → mostly outdated, avoid for now

✅ Example Functional Component:

jsx
Copy
Edit
function Greeting({ name }) {
  return <h1>Hello, {name}</h1>;
}
🔸 Props (Passing Data)
Props = input to components.

jsx
Copy
Edit
<Greeting name="Priya" />
Output:

Copy
Edit
Hello, Priya
Props are read-only — you cannot modify them inside the child.

🔸 State (useState)
State = variables that change over time and cause re-rendering.

jsx
Copy
Edit
const [count, setCount] = useState(0);
jsx
Copy
Edit
<button onClick={() => setCount(count + 1)}>+</button>
🔸 Lifecycle with useEffect
React calls useEffect() after render.

Fetch data

Set timers

Listen to events

jsx
Copy
Edit
useEffect(() => {
  console.log("Component mounted!");
}, []);
Cleanup example:

jsx
Copy
Edit
useEffect(() => {
  const timer = setInterval(() => console.log("Tick"), 1000);
  return () => clearInterval(timer); // clean up
}, []);
🔸 Conditional Rendering
jsx
Copy
Edit
{isLoggedIn ? <Dashboard /> : <Login />}
🔗 2. REST APIs with React
🔸 REST = Representational State Transfer
Common operations:

GET → fetch data

POST → send data

PUT/PATCH → update data

DELETE → delete data

🔸 Using fetch() to GET Data
jsx
Copy
Edit
useEffect(() => {
  fetch("https://jsonplaceholder.typicode.com/users")
    .then(res => res.json())
    .then(data => setUsers(data));
}, []);
Loop through data:

jsx
Copy
Edit
<ul>
  {users.map(u => <li key={u.id}>{u.name}</li>)}
</ul>
🔸 Using fetch() to POST Data
jsx
Copy
Edit
const handleSubmit = async () => {
  const res = await fetch("/api/user", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ name: "Priya" })
  });
  const data = await res.json();
  console.log(data);
};
🔸 Axios (Alternative to fetch)
bash
Copy
Edit
npm install axios
jsx
Copy
Edit
import axios from 'axios';

useEffect(() => {
  axios.get("/api/users").then(res => setUsers(res.data));
}, []);
📝 3. Handling Forms and Input
🔸 Controlled Component
React "controls" the form input using state.

jsx
Copy
Edit
const [email, setEmail] = useState("");

<form onSubmit={handleSubmit}>
  <input type="email" value={email} onChange={e => setEmail(e.target.value)} />
</form>
🔸 Submitting a form
jsx
Copy
Edit
const handleSubmit = (e) => {
  e.preventDefault(); // avoid refresh
  console.log("Email:", email);
};
🧩 4. JavaScript + DSA You’ll Need
🔸 Array Methods
map()
Transform an array:

js
Copy
Edit
[1, 2, 3].map(x => x * 2); // [2, 4, 6]
filter()
Filter out elements:

js
Copy
Edit
[1, 2, 3].filter(x => x > 1); // [2, 3]
reduce()
Combine to single value:

js
Copy
Edit
[1, 2, 3].reduce((acc, val) => acc + val, 0); // 6
🔸 Common Interview-Style Problems
✅ Reverse a string
js
Copy
Edit
function reverse(str) {
  return str.split('').reverse().join('');
}
✅ Remove duplicates from array
js
Copy
Edit
function unique(arr) {
  return [...new Set(arr)];
}
✅ Count frequency of characters
js
Copy
Edit
function freqCounter(str) {
  const freq = {};
  for (let ch of str) {
    freq[ch] = (freq[ch] || 0) + 1;
  }
  return freq;
}
💡 5. Git + GitHub (Real-World + Assessment Rules)
🔸 Workflow for Assessment
bash
Copy
Edit
git init
git add .
git commit -m "initial"
git remote add origin https://github.com/yourname/21CS123.git
git push -u origin master







